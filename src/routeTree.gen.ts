/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedWorkspaceRouteImport } from './routes/_authenticated/workspace'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedTodosTodoIdRouteImport } from './routes/_authenticated/todos.$todoId'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedWorkspaceRoute = AuthenticatedWorkspaceRouteImport.update({
  id: '/workspace',
  path: '/workspace',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedTodosTodoIdRoute =
  AuthenticatedTodosTodoIdRouteImport.update({
    id: '/todos/$todoId',
    path: '/todos/$todoId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/profile': typeof AuthenticatedProfileRoute
  '/workspace': typeof AuthenticatedWorkspaceRoute
  '/': typeof AuthenticatedIndexRoute
  '/todos/$todoId': typeof AuthenticatedTodosTodoIdRoute
}
export interface FileRoutesByTo {
  '/profile': typeof AuthenticatedProfileRoute
  '/workspace': typeof AuthenticatedWorkspaceRoute
  '/': typeof AuthenticatedIndexRoute
  '/todos/$todoId': typeof AuthenticatedTodosTodoIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/workspace': typeof AuthenticatedWorkspaceRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/todos/$todoId': typeof AuthenticatedTodosTodoIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/profile' | '/workspace' | '/' | '/todos/$todoId'
  fileRoutesByTo: FileRoutesByTo
  to: '/profile' | '/workspace' | '/' | '/todos/$todoId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_authenticated/profile'
    | '/_authenticated/workspace'
    | '/_authenticated/'
    | '/_authenticated/todos/$todoId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/workspace': {
      id: '/_authenticated/workspace'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof AuthenticatedWorkspaceRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/todos/$todoId': {
      id: '/_authenticated/todos/$todoId'
      path: '/todos/$todoId'
      fullPath: '/todos/$todoId'
      preLoaderRoute: typeof AuthenticatedTodosTodoIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedWorkspaceRoute: typeof AuthenticatedWorkspaceRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedTodosTodoIdRoute: typeof AuthenticatedTodosTodoIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedWorkspaceRoute: AuthenticatedWorkspaceRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedTodosTodoIdRoute: AuthenticatedTodosTodoIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
